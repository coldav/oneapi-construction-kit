name: run sycl cts
description: run sycl cts

inputs:
  target:
    description: 'target architecture'
  sycl_device:
    description: '"opencl" or "native_cpu"'
    default: 'opencl'
  llvm_version:
    description: 'llvm major version (e.g 19,20, main) - to be used for llvm specific fails'
    required: true

runs:
  using: "composite"
  steps:
    - name: calc vars
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}

    - name: Install Ninja
      uses: llvm/actions/install-ninja@main

    - name: download ock artifact
      if: inputs.sycl_device == 'opencl'
      uses: actions/download-artifact@v4
      with:
        name: ock_${{inputs.target}}
        path: install_ock

    - name: download SYCL-CTS artifact
      uses: ./.github/actions/download_artifact
      with:
        name: sycl_cts_${{inputs.sycl_device}}_${{inputs.target}}
        path: SYCL-CTS/bin
        needs_tar: 'true'
        run_id: ${{ github.run_id }}

    - name: Download qemu
      if: steps.calc_vars.outputs.arch != 'X86_64'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install --yes qemu-user

    - name: download dpc++ artifact
      uses: ./.github/actions/download_artifact
      with:
        name: dpcpp_${{inputs.target}}
        path: install_dpcpp
        needs_tar: 'true'
        run_id: ${{ github.run_id }}

    - name: run sycl cts
      shell: bash
      env:
        SYCL_CTS_TIMEOUT: '03:30:00'
        SYCL_CTS_FILTER: ''
      run: |
        echo running sycl cts
        export LD_LIBRARY_PATH=$GITHUB_WORKSPACE/install_dpcpp/lib
        if [[ "${{inputs.sycl_device}}" = "opencl" ]] ; then
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$GITHUB_WORKSPACE/install_ock/lib
          export ONEAPI_DEVICE_SELECTOR=opencl:0
          export OCL_ICD_FILENAMES=$GITHUB_WORKSPACE/install_ock/lib/libCL.so
        else # native_cpu
          export ONEAPI_DEVICE_SELECTOR=native_cpu:cpu
        fi
        export CTS_CSV_FILE=$GITHUB_WORKSPACE/scripts/testing/sycl_cts/tests.csv
        PREPEND_PATH=()
        if [[ "${{inputs.target}}" =~ .*riscv64.* ]] ; then
          PREPEND_PATH=(--prepend-path '/usr/bin/qemu-riscv64 -L /usr/riscv64-linux-gnu')
        fi

        # Build override file, all is done first, then the target specific. The last file can overwrite previous overrides.
        python3 scripts/testing/create_override_csv.py -d scripts/testing/sycl_cts \
             -k ${{inputs.sycl_device}} ${{ inputs.target }} llvm_${{ inputs.llvm_version }} \
             -o override_combined.csv -vv

        exitcode=0
        set -x
        python3 $GITHUB_WORKSPACE/scripts/testing/run_cities.py \
          --color=always \
          --timeout $SYCL_CTS_TIMEOUT \
          "${PREPEND_PATH[@]}" \
          -p sycl_cts \
          -b SYCL-CTS/bin \
          -L SYCL-CTS/lib \
          -s $CTS_CSV_FILE \
          -l SYCL-CTS/cts.log -f SYCL-CTS/cts.fail \
          -r SYCL-CTS/cts.xml \
          -v \
          -o override_combined.csv \
          $SYCL_CTS_FILTER || exitcode=$?

        $GITHUB_WORKSPACE/scripts/testing/create_sycl_cts_test_lists.sh "${PREPEND_PATH[@]}" SYCL-CTS $CTS_CSV_FILE csv.txt cts_all.txt
        set +x
        # output a diff of the generated list csv.txt and cts_all.txt
        diff -u csv.txt cts_all.txt || echo "WARNING - Missing some tests from sycl cts file based on test_all --list-tests - see > above"
        exit $exitcode
