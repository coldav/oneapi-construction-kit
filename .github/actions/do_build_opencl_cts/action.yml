name: build opencl cts
description: build opencl cts

inputs:
  target:
    description: 'target architecture'
  create_opencl_cts_artefact_method:
    description: 'method of creating ock artefact - build,<run_id>'
    default: "build"
runs:
  using: "composite"
  steps:
    - name: calc vars
      if: inputs.create_opencl_cts_artefact_method == 'build'
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}

    - name: Install Ninja
      if: inputs.create_opencl_cts_artefact_method == 'build'
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch
    
    - name: download icd artifact
      # Currently need to do the even if we are installing as build and run have
      # not been separated into different jobs      
      uses: actions/download-artifact@v4
      with:
        name: icd_${{inputs.target}}
        path: install_icd

    - name: download header artifact
      if: inputs.create_opencl_cts_artefact_method == 'build'
      uses: actions/download-artifact@v4
      with:
        name: header_${{inputs.target}}
        path: install_headers

    - name: checkout test suite
      if: inputs.create_opencl_cts_artefact_method == 'build'    
      uses: actions/checkout@v4
      with:
        repository: KhronosGroup/OpenCL-CTS
        path: OpenCL-CTS

    - name: build opencl cts
      if: inputs.create_opencl_cts_artefact_method == 'build'    
      shell: bash    
      env:
        # TODO: host-x86_64-linux 'toolchain' - expand for other targets
        CMAKE_TOOLCHAIN: "-DCMAKE_C_COMPILER=gcc -DCMAKE_C_FLAGS=-m64 -DCMAKE_CXX_COMPILER=g++ \
                          -DCMAKE_CXX_FLAGS=-m64 -DPKG_CONFIG_EXECUTABLE=pkg-config"
      run: |
        # get spirv-as
        sudo apt-get update
        sudo apt-get install -y spirv-tools
        # apply patches
        pushd OpenCL-CTS
        git log -1
        git apply $GITHUB_WORKSPACE/.github/patches/OpenCL-CTS-0001-Patch-sub-group-testing.patch
        git apply $GITHUB_WORKSPACE/.github/patches/OpenCL-CTS-0002-Permit-building-for-unknown-architectures.patch
        popd
        # do build
        set -x
        cmake -G Ninja $CMAKE_TOOLCHAIN $GITHUB_WORKSPACE/OpenCL-CTS \
          -DCMAKE_BUILD_TYPE=Release \
          -DOPENCL_LIBRARIES=OpenCL \
          -DCL_INCLUDE_DIR=$GITHUB_WORKSPACE/install_headers/include \
          -DCL_LIB_DIR=$GITHUB_WORKSPACE/install_icd/lib
        ninja -v
        python3 $GITHUB_WORKSPACE/OpenCL-CTS/test_conformance/spirv_new/assemble_spirv.py -v \
          --source-dir $GITHUB_WORKSPACE/OpenCL-CTS/test_conformance/spirv_new/spirv_asm \
          --output-dir $GITHUB_WORKSPACE/test_conformance/spirv_bin

    - name: download previous opencl_cts if needed ${{ matrix.target }} ${{ matrix.create_ock_artefact_method}}
      shell: bash      
      if: inputs.create_opencl_cts_artefact_method != 'build'     
      run: |
        gh run download ${{ inputs.create_opencl_cts_artefact_method }} -n opencl_cts_${{ inputs.target }} -D test_conformance
        pwd
        echo ls $PWD/test_conformance
        ls test_conformance
    
    - name: upload opencl cts artifacts
      uses: actions/upload-artifact@v4
      with:
        name: opencl_cts_${{inputs.target}}
        path: |
          test_conformance
          !test_conformance/**/.*
          !test_conformance/**/CMakeCache.txt
          !test_conformance/**/CMakeFiles
          !test_conformance/**/CMakeFiles/**
          !test_conformance/**/*.cmake
          !test_conformance/**/*.ninja
          !test_conformance/test_common
          !test_conformance/test_common/**
        retention-days: 2

