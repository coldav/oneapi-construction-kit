name: build opencl cts
description: build opencl cts

inputs:
  target:
    required: true
    type: string
    description: 'target architecture'
  cache_update:
    required: false
    type: boolean
    description: 'flag indicating that a cache update for the built artifact is required'
    default: false
  spirv_headers_ref:
    required: false
    type: string
    description: 'Git checkout ref for SPIRV-Headers repo'
    default: ''
  opencl_cts_ref:
    required: false
    type: string
    description: 'Git checkout ref for OpenCL-CTS repo'
    default: ''

runs:
  using: "composite"
  steps:
    - name: calc vars
      id: calc_vars
      uses: ./.github/actions/calc_vars
      with:
        target: ${{ inputs.target }}

    - name: Install Ninja
      uses: llvm/actions/install-ninja@a1ea791b03c8e61f53a0e66f2f73db283aa0f01e # main branch
    
    - name: download icd artifact
      uses: actions/download-artifact@v4
      with:
        name: icd_${{inputs.target}}
        path: install_icd

    - name: download opencl headers artifact
      uses: actions/download-artifact@v4
      with:
        name: opencl_headers_${{inputs.target}}
        path: install_opencl_headers

    - name: checkout spirv-headers
      uses: actions/checkout@v4
      with:
        repository: KhronosGroup/SPIRV-Headers
        path: SPIRV-Headers
        ref: ${{inputs.spirv_headers_ref}}

    - name: checkout test suite
      uses: actions/checkout@v4
      with:
        repository: KhronosGroup/OpenCL-CTS
        path: OpenCL-CTS
        ref: ${{inputs.opencl_cts_ref}}

    - name: build opencl cts
      shell: bash
      env:
        CMAKE_TOOLCHAIN: "${{ steps.calc_vars.outputs.cmake_toolchain }}"
      run: |
        echo CMAKE_TOOLCHAIN is: $CMAKE_TOOLCHAIN
        # apply patches
        git -C OpenCL-CTS log -1
        for patch in $GITHUB_WORKSPACE/scripts/testing/patches/OpenCL-CTS-*.patch
        do
          if test -f "$patch"
          then
            echo "Applying ${patch##*/}"
            git -C OpenCL-CTS apply "$patch"
          fi
        done
        # do build
        set -x
        mkdir $GITHUB_WORKSPACE/build
        cd $GITHUB_WORKSPACE/build
        cmake -G Ninja $CMAKE_TOOLCHAIN $GITHUB_WORKSPACE/OpenCL-CTS \
          -DCMAKE_BUILD_TYPE=Release \
          -DOPENCL_LIBRARIES=OpenCL \
          -DCL_INCLUDE_DIR=$GITHUB_WORKSPACE/install_opencl_headers/include \
          -DCL_LIB_DIR=$GITHUB_WORKSPACE/install_icd/lib \
          -DSPIRV_INCLUDE_DIR=$GITHUB_WORKSPACE/SPIRV-Headers
        ninja -v
        # remove some files to reduce the size and complexity of the upload
        # (internal upload does not support filtering out)
        find $GITHUB_WORKSPACE/build/test_conformance \( -name "*.o" -o -name "*.cmake" \) -delete

    - name: upload opencl cts artifacts
      uses: ./.github/actions/upload_artifact
      with:
        name: opencl_cts_${{inputs.target}}
        path: build/test_conformance
        retention-days: 7
        needs_tar: 'true'

    - name: check existence of opencl cts artifact cache
      if: inputs.cache_update == 'true'
      uses: actions/cache/restore@v4
      id: cache_check
      with:
        key: opencl_cts_${{inputs.target}}
        path: build/test_conformance
        lookup-only: true

    - name: error on attempt to overwrite existing opencl cts artifact cache
      if: inputs.cache_update == 'true' && steps.cache_check.outputs.cache-hit == 'true'
      shell: bash
      run: |
        echo "Error: attempt to overwrite existing opencl cts cache: opencl_cts_${{inputs.target}}"
        exit 1

    - name: create opencl cts artifact cache
      if: inputs.cache_update == 'true' && steps.cache_check.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        key: opencl_cts_${{inputs.target}}
        path: build/test_conformance
