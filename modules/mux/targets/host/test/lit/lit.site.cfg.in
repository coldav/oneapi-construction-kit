# Copyright (C) Codeplay Software Limited
#
# Licensed under the Apache License, Version 2.0 (the "License") with LLVM
# Exceptions; you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://github.com/uxlfoundation/oneapi-construction-kit/blob/main/LICENSE.txt
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
# @AUTOGENERATED_MESSAGE@

import lit.util
from lit.llvm.subst import ToolSubst

def if_enabled(config, if_true=True, if_false=False):
    return lit.util.pythonize_bool(config) and if_true or if_false

# Paths to helper utilities.
config.tools = [
    ToolSubst('oclc'),
    ToolSubst('clc'),
]

# Defer to the common lit configuration to set up the bulk of the config.
common_lit_cfg_path = os.path.join('@CA_COMMON_LIT_BINARY_PATH@', 'lit.common.cfg')

lit_config.load_config(config, common_lit_cfg_path)

config.test_exec_root = '@CURRENT_BINARY_DIR@'

config.ca_host_target_cpu = '@CA_HOST_TARGET_CPU@' or None

config.ca_host_cl_device_name = '@host_CA_HOST_CL_DEVICE_NAME@'

config.ca_enable = set(filter(None, (
    # Host on Windows isn't double-conformant, so doubles are disabled by default
    if_enabled('@CA_HOST_ENABLE_FP64@', 'fp64'),
    if_enabled('@CA_ENABLE_HOST_IMAGE_SUPPORT@', 'images'),
    # Device specific build options are only reported with debug support
    if_enabled('@CA_ENABLE_DEBUG_SUPPORT@', 'debug'),
    if_enabled('@CA_ENABLE_LLVM_OPTIONS_IN_RELEASE@', 'debug'),
)))

config.ca_icd_target_file = if_enabled(
    '@CA_CL_ENABLE_ICD_LOADER@',
    '@CL_TARGET_FILE@',
    None
)

# Now load the in-tree lit config
lit_cfg_path = os.path.join('@CMAKE_CURRENT_SOURCE_DIR@', 'lit.cfg')
if not os.path.exists(lit_cfg_path):
    lit_cfg_path = os.path.join(os.path.dirname(__file__), 'lit.cfg')

lit_config.load_config(config, lit_cfg_path)
